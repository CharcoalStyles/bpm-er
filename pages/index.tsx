import Head from "next/head";
import { Header } from "@/components/header";
import { Hero } from "@/components/hero";
import { useEffect, useRef, useState } from "react";
import spotifyApi from "spotify-web-api-node";

import axios from "axios";
import { Playlists } from "@/components/Playlists";
import { Box, Button, Container, Grid, Typography } from "@mui/material";
import { WorkingList } from "@/components/WorkingList";
import { Result } from "@/components/Result";

type AppState = "home" | "playlists" | "workingList" | "results";

export default function Home() {
  const [appState, setAppState] = useState<AppState>("home");
  const [initalTrackList, setInitalTrackList] = useState<
    Array<SpotifyApi.TrackObjectFull>
  >([]);
  const [finalTrackList, setFinalTrackList] = useState<
    Array<SpotifyApi.TrackObjectFull>
  >([]);
  const [user, setUser] = useState<string>();
  const [loggedIn, setLoggedIn] = useState(false);
  const spotify = useRef<spotifyApi>();

  useEffect(() => {
    const access_token = localStorage.getItem("access_token");
    const refresh_token = localStorage.getItem("refresh_token");
    if (access_token && refresh_token) {
      const current = new spotifyApi({
        accessToken: access_token,
        refreshToken: refresh_token,
      });
      spotify.current = current;
      current
        .getMe()
        .then(({ body: { display_name } }) => {
          setUser(display_name);
          setLoggedIn(true);
        })
        .catch(() => {});
    }
  }, []);

  return (
    <>
      <Head>
        <title>BPM-er</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        loggedIn={loggedIn}
        loggedinUser={user}
        onStartOver={() => {
          setInitalTrackList([]);
          setFinalTrackList([]);
          setAppState("home");
        }}
        spotify={spotify.current}
        onLogout={() => {
          setLoggedIn(false);
        }}
      />
      {!loggedIn && <Hero />}
      {loggedIn && spotify.current && (
        <Container
          sx={{
            bgcolor: "background.paper",
          }}
          maxWidth="md"
        >
          {appState === "home" && (
            <Box>
              <Typography>
                Do you want to start with a playlist or from scratch?
              </Typography>
              <Grid container>
                <Grid item xs={6}>
                  <Button
                    sx={{ my: 2 }}
                    variant="contained"
                    onClick={() => {
                      setAppState("playlists");
                    }}
                  >
                    From a playlist
                  </Button>
                </Grid>
                <Grid item xs={6}>
                  <Button
                    disabled
                    sx={{ my: 2 }}
                    variant="contained"
                    onClick={() => {
                      setAppState("workingList");
                    }}
                  >
                    From scratch
                  </Button>
                </Grid>
              </Grid>
            </Box>
          )}

          {appState === "playlists" && (
            <Playlists
              spotifyApi={spotify.current}
              onSelectPlaylist={(playlistId) => {
                spotify.current
                  ?.getPlaylistTracks(playlistId)
                  .then(({ body }) => {
                    const tracks = body.items
                      .map(({ track }) => track)
                      .filter((track) => track !== null);
                    setInitalTrackList(tracks as SpotifyApi.TrackObjectFull[]);
                    setAppState("workingList");
                  });
              }}
            />
          )}

          {appState === "workingList" && (
            <WorkingList
              spotifyApi={spotify.current}
              initalSongList={initalTrackList}
              onGenerate={(songs) => {
                spotify.current
                  ?.getRecommendations({
                    seed_tracks: songs.map(({ id }) => id),
                    max_tempo: songs.reduce(
                      (max, { audioFeatures: { tempo } }) => {
                        return tempo > max ? tempo : max;
                      },
                      0
                    ),
                    min_tempo: songs.reduce(
                      (min, { audioFeatures: { tempo } }) => {
                        return tempo < min ? tempo : min;
                      },
                      1000
                    ),
                  })
                  .then(({ body }) => {
                    const allIds = [
                      ...body.seeds.map(({ id }) => id),
                      ...body.tracks.map(({ id }) => id),
                    ];
                    spotify.current?.getTracks(allIds).then(({ body }) => {
                      setFinalTrackList(body.tracks);
                      setAppState("results");
                    });
                  });
              }}
            />
          )}

          {appState === "results" && (
            <Result
              spotifyApi={spotify.current}
              songList={finalTrackList}
              onExit={() => {
                setInitalTrackList([]);
                setFinalTrackList([]);
                setAppState("home");
              }}
            />
          )}
        </Container>
      )}
    </>
  );
}
